# Window padding (changes require restart)
window:
  padding:
    x: 10
    y: 10
  #decorations: none
scrolling:
  history: 10000
  multiplier: 3

# Font configuration
font:
  size: 22
  normal:
    family: Ubuntu Mono Nerd Font
  bold:
    family: Ubuntu Mono Nerd Font
    style: Bold
  italic:
    family: Ubuntu Mono Nerd Font
    style: Italic
  bold_italic:
    family: Ubuntu Mono Nerd Font
    style: Bold Italic

# Colors (Dracula)
colors:
  # Default colors
  primary:
    background: "0x282a36"
    foreground: "0xf8f8f2"

    # Bright and dim foreground colors
    #
    # The dimmed foreground color is calculated automatically if it is not present.
    # If the bright foreground color is not set, or `draw_bold_text_with_bright_colors`
    # is `false`, the normal foreground color will be used.
    #dim_foreground: '0x9a9a9a'
    #bright_foreground: '0xffffff'

  # Cursor colors
  #
  # Colors which should be used to draw the terminal cursor. If these are unset,
  # the cursor color will be the inverse of the cell color.
  cursor:
    text: "0x44475a"
    cursor: "0xf8f8f2"

  # Selection colors
  #
  # Colors which should be used to draw the selection area. If selection
  # background is unset, selection color will be the inverse of the cell colors.
  # If only text is unset the cell text color will remain the same.
  selection:
    text: "0xf8f8f2"
    background: "0x44475a"

  # Normal colors
  normal:
    black: "0x000000"
    red: "0xff5555"
    green: "0x50fa7b"
    yellow: "0xf1fa8c"
    blue: "0xbd93f9"
    magenta: "0xff79c6"
    cyan: "0x8be9fd"
    white: "0xbfbfbf"

  # Bright colors
  bright:
    black: "0x4d4d4d"
    red: "0xff6e67"
    green: "0x5af78e"
    yellow: "0xf4f99d"
    blue: "0xcaa9fa"
    magenta: "0xff92d0"
    cyan: "0x9aedfe"
    white: "0xe6e6e6"

  # Dim colors
  #
  # If the dim colors are not set, they will be calculated automatically based
  # on the `normal` colors.
  dim:
    black: "0x14151b"
    red: "0xff2222"
    green: "0x1ef956"
    yellow: "0xebf85b"
    blue: "0x4d5b86"
    magenta: "0xff46b0"
    cyan: "0x59dffc"
    white: "0xe6e6d1"

  # Indexed Colors
  #
  # The indexed colors include all colors from 16 to 256.
  # When these are not set, they're filled with sensible defaults.
  #
  # Example:
  #   `- { index: 16, color: '0xff00ff' }`
  #
  indexed_colors: []

# Visual Bell
# ...
cursor:
  style: Beam
  # If the vi mode cursor style is `None` or not specified, it will fall back to
  # the style of the active value of the normal cursor.
  vi_mode_style: Block
  unfocused_hollow: true

# Live config reload (changes require restart)
live_config_reload: true
# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
# Default:
#   - (macOS) /bin/bash --login
#   - (Linux/BSD) user login shell
#   - (Windows) powershell

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ClearSelection
#   - ReceiveChar
#   - None
#
#   (`mode: Vi` only):
#   - Open
#   - Up
#   - Down
#   - Left
#   - Right
#   - First
#   - Last
#   - FirstOccupied
#   - High
#   - Middle
#   - Low
#   - SemanticLeft
#   - SemanticRight
#   - SemanticLeftEnd
#   - SemanticRightEnd
#   - WordRight
#   - WordLeft
#   - WordRightEnd
#   - WordLeftEnd
#   - Bracket
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
#   (Linux/BSD only):
#   - CopySelection: Copies into selection buffer
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# at once.
key_bindings:
  - { key: Paste, action: Paste }
  - { key: Copy, action: Copy }
  - { key: K, mods: Control, action: ClearLogNotice }
  - { key: K, mods: Control, mode: ~Vi, chars: "\x0c" }
  - { key: PageUp, mods: Shift, mode: ~Alt, action: ScrollPageUp }
  - { key: PageDown, mods: Shift, mode: ~Alt, action: ScrollPageDown }
  - { key: Home, mods: Shift, mode: ~Alt, action: ScrollToTop }
  - { key: End, mods: Shift, mode: ~Alt, action: ScrollToBottom }
  ## Vi Mode
  - { key: Space, mods: Shift|Control, mode: Vi, action: ScrollToBottom }
  - { key: Space, mods: Shift|Control, action: ToggleViMode }
  - { key: Escape, mode: Vi, action: ClearSelection }
  - { key: I, mode: Vi, action: ScrollToBottom }
  - { key: I, mode: Vi, action: ToggleViMode }
  - { key: Y, mods: Control, mode: Vi, action: ScrollLineUp }
  - { key: E, mods: Control, mode: Vi, action: ScrollLineDown }
  - { key: G, mode: Vi, action: ScrollToTop }
  - { key: G, mods: Shift, mode: Vi, action: ScrollToBottom }
  - { key: B, mods: Control, mode: Vi, action: ScrollPageUp }
  - { key: F, mods: Control, mode: Vi, action: ScrollPageDown }
  - { key: U, mods: Control, mode: Vi, action: ScrollHalfPageUp }
  - { key: D, mods: Control, mode: Vi, action: ScrollHalfPageDown }
  - { key: Y, mode: Vi, action: Copy }
  - { key: Y, mode: Vi, action: ClearSelection }
  - { key: Copy, mode: Vi, action: ClearSelection }
  - { key: V, mode: Vi, action: ToggleNormalSelection }
  - { key: V, mods: Shift, mode: Vi, action: ToggleLineSelection }
  - { key: V, mods: Control, mode: Vi, action: ToggleBlockSelection }
  - { key: V, mods: Alt, mode: Vi, action: ToggleSemanticSelection }
  - { key: Return, mode: Vi, action: Open }
  - { key: O, mods: Control, mode: Vi, action: Open }
  - { key: K, mode: Vi, action: Up }
  - { key: J, mode: Vi, action: Down }
  - { key: H, mode: Vi, action: Left }
  - { key: L, mode: Vi, action: Right }
  - { key: Up, mode: Vi, action: Up }
  - { key: Down, mode: Vi, action: Down }
  - { key: Left, mode: Vi, action: Left }
  - { key: Right, mode: Vi, action: Right }
  - { key: Key0, mode: Vi, action: First }
  - { key: Key4, mods: Shift, mode: Vi, action: Last }
  - { key: Key6, mods: Shift, mode: Vi, action: FirstOccupied }
  - { key: H, mods: Shift, mode: Vi, action: High }
  - { key: M, mods: Shift, mode: Vi, action: Middle }
  - { key: L, mods: Shift, mode: Vi, action: Low }
  - { key: B, mode: Vi, action: SemanticLeft }
  - { key: W, mode: Vi, action: SemanticRight }
  - { key: E, mode: Vi, action: SemanticRightEnd }
  - { key: B, mods: Shift, mode: Vi, action: WordLeft }
  - { key: W, mods: Shift, mode: Vi, action: WordRight }
  - { key: E, mods: Shift, mode: Vi, action: WordRightEnd }
  - { key: Key5, mods: Shift, mode: Vi, action: Bracket }
  ## (Windows, Linux, and BSD only)
  - { key: V, mods: Control|Shift, action: Paste }
  - { key: C, mods: Control|Shift, action: Copy }
  - { key: C, mods: Control|Shift, mode: Vi, action: ClearSelection }
  - { key: Insert, mods: Shift, action: PasteSelection }
  - { key: Key0, mods: Control, action: ResetFontSize }
  - { key: Equals, mods: Control, action: IncreaseFontSize }
  - { key: Plus, mods: Control, action: IncreaseFontSize }
  - { key: Minus, mods: Control, action: DecreaseFontSize }
# Log level
#
# Values for `log_level`:
#   - None
#   - Error
#   - Warn
#   - Info
#   - Debug
#   - Trace
#log_level: Warn
